{
  "version": 3,
  "sources": ["../../../../../src/agendamento/mock/agendamento.mock.ts", "../../../../../src/agendamento/repository/AgendamentoRepository.ts", "../../../../../src/agendamento/entity/AgendamentoEntity.ts", "../../../../../src/agendamento/mapper/AgendamentoMapper.ts", "../../../../../src/agenda/repository/AgendaRepository.ts", "../../../../../src/agenda/entity/AgendaEntity.ts", "../../../../../src/agenda/mapper/AgendaMapper.ts", "../../../../../src/agenda/service/AgendaService.ts", "../../../../../src/agendamento/service/AgendamentoService.ts", "../../../../../src/agendamento/controller/AgendamentoController.ts"],
  "sourcesContent": ["import { AgendamentoEntity } from \"../entity/AgendamentoEntity\";\n\nexport const agendamentosMock: AgendamentoEntity[] = [];\n", "import type { IAgendamentoRepository } from \"../interface/IAgendamentoRepository\";\nimport { AgendamentoEntity } from \"../entity/AgendamentoEntity\";\nimport { agendamentosMock } from \"../mock/agendamento.mock\";\n\nexport class AgendamentoRepository implements IAgendamentoRepository {\n    async save(entity: AgendamentoEntity): Promise<AgendamentoEntity> {\n        agendamentosMock.push(entity);\n        return entity;\n    }\n\n    async exists(medico: string, dataHorario: string): Promise<boolean> {\n        return agendamentosMock.some(\n            (a: { medico: string; dataHorario: string; }) => a.medico === medico && a.dataHorario === dataHorario\n        );\n    }\n}\n", "export class AgendamentoEntity {\n  medico!: string;\n  paciente!: string;\n  dataHorario!: string;\n  constructor(init?: Partial<AgendamentoEntity>) {\n    Object.assign(this, init);\n  }\n}\n", "import type { AgendamentoDTO } from \"../dto/AgendamentoDTO\";\nimport { AgendamentoEntity } from \"../entity/AgendamentoEntity\";\n\nexport class AgendamentoMapper {\n  static toEntity(dto: AgendamentoDTO): AgendamentoEntity {\n    return new AgendamentoEntity({\n      medico: dto.medico,\n      paciente: dto.paciente,\n      dataHorario: dto.dataHorario,\n    });\n  }\n\n  static toDTO(entity: AgendamentoEntity): AgendamentoDTO {\n    return {\n      medico: entity.medico ?? \"\",\n      paciente: entity.paciente ?? \"\",\n      dataHorario: entity.dataHorario ?? \"\",\n    };\n  }\n}\n", "import { promises as fs } from \"fs\";\nimport * as path from \"path\";\nimport type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport type { IAgendaRepository } from \"../interface/IAgendaRepository\";\n\nconst FILE = path.resolve(process.cwd(), \"src/agenda/mock/agendas.json\");\n\nexport class AgendaRepository implements IAgendaRepository {\n  \n  private async readFile(): Promise<AgendaDTO[]> {\n    const data = await fs.readFile(FILE, \"utf-8\");\n    return JSON.parse(data) as AgendaDTO[];\n  }\n\n  private async writeFile(agendas: AgendaDTO[]): Promise<void> {\n    await fs.writeFile(FILE, JSON.stringify(agendas, null, 2), \"utf-8\");\n  }\n\n  async findAll(): Promise<AgendaDTO[]> { return this.readFile(); }\n  \n  async findById(id: number): Promise<AgendaDTO | null> {\n    const agendas = await this.readFile();\n    return agendas.find(a => a.id === Number(id)) ?? null;\n  }\n\n  async deleteHorario(id: number, horario: string): Promise<void> {\n    const agendas = await this.readFile();\n    const agenda = agendas.find(a => a.id === Number(id));\n    if (!agenda) return;\n    const alvo = (horario ?? \"\").trim();\n    agenda.horariosDisponiveis = (agenda.horariosDisponiveis ?? [])\n      .map(h => h.trim())\n      .filter(h => h !== alvo);\n    await this.writeFile(agendas);\n  }\n\n}\n", "export class AgendaEntity {\n  id: number | undefined;\n  nome: string | undefined;\n  especialidade: string | undefined;\n  horariosDisponiveis: string[] | undefined;\n}", "import type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport { AgendaEntity } from \"../entity/AgendaEntity\";\n\nexport class AgendaMapper {\n  static toEntity(dto: AgendaDTO): AgendaEntity {\n    const entity = new AgendaEntity();\n    entity.id = dto.id;\n    entity.nome = dto.nome;\n    entity.especialidade = dto.especialidade;\n    entity.horariosDisponiveis = dto.horariosDisponiveis;\n    return entity;\n  }\n\n  static toDTO(entity: AgendaEntity): AgendaDTO {\n    return {\n      id: entity.id ?? 0,\n      nome: entity.nome ?? \"\",\n      especialidade: entity.especialidade ?? \"\",\n      horariosDisponiveis: entity.horariosDisponiveis ?? [],\n    };\n  }\n\n  static toEntityList(dtos: AgendaDTO[]): AgendaEntity[] {\n    return dtos.map((dto) => this.toEntity(dto));\n  }\n\n  static toDTOList(entities: AgendaEntity[]): AgendaDTO[] {\n    return entities.map((entity) => this.toDTO(entity));\n  }\n}\n", "import type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport type { IAgendaService } from \"../interface/IAgendaService\";\nimport { AgendaRepository } from \"../repository/AgendaRepository\";\nimport { AgendaMapper } from \"../mapper/AgendaMapper\";\nimport type { IAgendaRepository } from \"../interface/IAgendaRepository\";\n\nexport class AgendaService implements IAgendaService {\n  private repository: IAgendaRepository;\n\n  constructor() {\n    this.repository = new AgendaRepository();\n  }\n\n  async excluirHorario(id: number, horario: string): Promise<void> {\n    return this.repository.deleteHorario(id, horario);\n  }\n  \n  async buscarPorId(id: number): Promise<AgendaDTO | null> {\n    const entity = await this.repository.findById(id);\n    if (!entity) {\n      return null;\n    }\n    return AgendaMapper.toDTO(entity);\n  }\n\n  async buscarAgendas(): Promise<AgendaDTO[]> {\n    const agendas = await this.repository.findAll();\n    return AgendaMapper.toDTOList(agendas);\n  }\n}\n", "import type { IAgendamentoService } from \"../interface/IAgendamentoService\";\nimport type { AgendamentoDTO } from \"../dto/AgendamentoDTO\";\nimport type{ IAgendamentoRepository } from \"../interface/IAgendamentoRepository\";\nimport{ AgendamentoRepository } from \"../repository/AgendamentoRepository\";\nimport { AgendamentoMapper } from \"../mapper/AgendamentoMapper\";\nimport type { IAgendaService } from \"../../agenda/interface/IAgendaService\";\nimport type { AgendaDTO } from \"../../agenda/dto/AgendaDTO\";\nimport { AgendaService } from \"../../agenda/service/AgendaService\";\n\n\nexport class AgendamentoService implements IAgendamentoService {\n  private repository: IAgendamentoRepository;\n  private agendaService: IAgendaService;\n  \n  constructor(repository?: IAgendamentoRepository, agendaService?: IAgendaService) {\n    this.repository = repository ?? new AgendamentoRepository();\n    this.agendaService = agendaService ?? new AgendaService();\n  }\n  \n\n  async marcarAgendamento(dto: AgendamentoDTO): Promise<AgendamentoDTO> {\n    \n    if (!dto?.id || !dto?.medico || !dto?.paciente || !dto?.dataHorario) {\n      throw new Error(\"Payload inv\u00E1lido: id, medico, paciente e data_horario s\u00E3o obrigat\u00F3rios.\");\n    }\n\n    const medicoAgenda: AgendaDTO | null = await this.agendaService.buscarPorId(dto.id);\n    if (!medicoAgenda) {\n      throw new Error(\"M\u00E9dico n\u00E3o encontrado.\");\n    }\n\n    const horarioExiste = medicoAgenda.horariosDisponiveis.includes(dto.dataHorario);\n    if (!horarioExiste) {\n      throw new Error(\"Hor\u00E1rio indispon\u00EDvel para este m\u00E9dico.\");\n    }\n\n    const entity = AgendamentoMapper.toEntity(dto);\n    const salvo = await this.repository.save(entity);\n    await this.agendaService.excluirHorario(dto.id, dto.dataHorario);\n\n    return AgendamentoMapper.toDTO(salvo);\n  }\n}\n", "import { AgendamentoService } from \"../service/AgendamentoService\";\n\nconst service = new AgendamentoService();\n\nexport const marcarAgendamento = async (event: { body: string; }) => {\n  try {\n    const body = typeof event.body === \"string\" ? JSON.parse(event.body) : event.body;\n    const dto = body?.agendamento;\n\n    const agendamento = await service.marcarAgendamento(dto);\n\n    return {\n      statusCode: 201,\n      body: JSON.stringify({\n        mensagem: \"Agendamento realizado com sucesso\",\n        agendamento,\n      }),\n    };\n  } catch (err: any) {\n    console.error(\"Erro ao marcar agendamento:\", err?.message || err);\n\n    const msg = String(err?.message || \"Erro interno\");\n    const statusCode =\n      msg.includes(\"inv\u00E1lido\") ? 400 :\n      msg.includes(\"Hor\u00E1rio indispon\u00EDvel\") ? 422 :\n      msg.includes(\"j\u00E1 reservado\") ? 409 :\n      msg.includes(\"M\u00E9dico n\u00E3o encontrado\") ? 404 : 500;\n\n    return {\n      statusCode,\n      body: JSON.stringify({ mensagem: msg }),\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
