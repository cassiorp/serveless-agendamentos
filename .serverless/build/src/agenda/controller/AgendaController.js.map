{
  "version": 3,
  "sources": ["../../../../../src/agenda/controller/AgendaController.ts", "../../../../../src/agenda/mocks/agendas.mock.ts", "../../../../../src/agenda/repository/AgendaRepository.ts", "../../../../../src/agenda/entity/AgendaEntity.ts", "../../../../../src/agenda/mapper/AgendaMapper.ts", "../../../../../src/agenda/service/AgendaService.ts"],
  "sourcesContent": ["import { AgendaService } from \"../service/AgendaService\";\n\nconst service = new AgendaService();\n\nexport const buscarAgendas = async () => {\n  try {\n    const result = await service.buscarAgendas();\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result),\n    };\n  } catch (error) {\n    console.error(\"Erro ao buscar agendas\", error);\n\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: \"Erro interno ao buscar agendas\" }),\n    };\n  }\n};\n", "import type { AgendaEntity } from \"../entity/AgendaEntity\";\n\nexport const agendasMock: AgendaEntity[] = [\n  {\n    id: 1,\n    nome: \"Dr. Jo\u00E3o Silva\",\n    especialidade: \"Cardiologista\",\n    horariosDisponiveis: [\n      \"2024-10-05 09:00\",\n      \"2024-10-05 10:00\",\n      \"2024-10-05 11:00\",\n    ],\n  },\n  {\n    id: 2,\n    nome: \"Dra. Maria Souza\",\n    especialidade: \"Dermatologista\",\n    horariosDisponiveis: [\n      \"2024-10-06 14:00\",\n      \"2024-10-06 15:00\",\n    ],\n  },\n];\n", "import type { AgendaEntity } from \"../entity/AgendaEntity\";\nimport type { IAgendaRepository } from \"../interface/IAgendaRepository\";\nimport { agendasMock } from \"../mocks/agendas.mock\";\n\nexport class AgendaRepository implements IAgendaRepository {\n  async findAll(): Promise<AgendaEntity[]> {\n    return agendasMock;\n  }\n}", "export class AgendaEntity {\n  id: number | undefined;\n  nome: string | undefined;\n  especialidade: string | undefined;\n  horariosDisponiveis: string[] | undefined;\n}", "import type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport { AgendaEntity } from \"../entity/AgendaEntity\";\n\nexport class AgendaMapper {\n  static toEntity(dto: AgendaDTO): AgendaEntity {\n    const entity = new AgendaEntity();\n    entity.id = dto.id;\n    entity.nome = dto.nome;\n    entity.especialidade = dto.especialidade;\n    entity.horariosDisponiveis = dto.horarios_disponiveis;\n    return entity;\n  }\n\n  static toDTO(entity: AgendaEntity): AgendaDTO {\n    return {\n      id: entity.id ?? 0,\n      nome: entity.nome ?? \"\",\n      especialidade: entity.especialidade ?? \"\",\n      horarios_disponiveis: entity.horariosDisponiveis ?? [],\n    };\n  }\n\n  static toEntityList(dtos: AgendaDTO[]): AgendaEntity[] {\n    return dtos.map((dto) => this.toEntity(dto));\n  }\n\n  static toDTOList(entities: AgendaEntity[]): AgendaDTO[] {\n    return entities.map((entity) => this.toDTO(entity));\n  }\n}\n", "import type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport type { IAgendaService } from \"../interface/IAgendaService\";\nimport { AgendaRepository } from \"../repository/AgendaRepository\";\nimport { AgendaMapper } from \"../mapper/AgendaMapper\";\n\nexport class AgendaService implements IAgendaService {\n  private repository: AgendaRepository;\n\n  constructor() {\n    this.repository = new AgendaRepository();\n  }\n\n  async buscarAgendas(): Promise<AgendaDTO[]> {\n    const agendas = await this.repository.findAll();\n    return AgendaMapper.toDTOList(agendas);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEO,IAAM,cAA8B;AAAA,EACzC;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,eAAe;AAAA,IACf,qBAAqB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,eAAe;AAAA,IACf,qBAAqB;AAAA,MACnB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;AClBO,IAAM,mBAAN,MAAoD;AAAA,EACzD,MAAM,UAAmC;AACvC,WAAO;AAAA,EACT;AACF;;;ACRO,IAAM,eAAN,MAAmB;AAK1B;;;ACFO,IAAM,eAAN,MAAmB;AAAA,EACxB,OAAO,SAAS,KAA8B;AAC5C,UAAM,SAAS,IAAI,aAAa;AAChC,WAAO,KAAK,IAAI;AAChB,WAAO,OAAO,IAAI;AAClB,WAAO,gBAAgB,IAAI;AAC3B,WAAO,sBAAsB,IAAI;AACjC,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,MAAM,QAAiC;AAC5C,WAAO;AAAA,MACL,IAAI,OAAO,MAAM;AAAA,MACjB,MAAM,OAAO,QAAQ;AAAA,MACrB,eAAe,OAAO,iBAAiB;AAAA,MACvC,sBAAsB,OAAO,uBAAuB,CAAC;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,OAAO,aAAa,MAAmC;AACrD,WAAO,KAAK,IAAI,CAAC,QAAQ,KAAK,SAAS,GAAG,CAAC;AAAA,EAC7C;AAAA,EAEA,OAAO,UAAU,UAAuC;AACtD,WAAO,SAAS,IAAI,CAAC,WAAW,KAAK,MAAM,MAAM,CAAC;AAAA,EACpD;AACF;;;ACxBO,IAAM,gBAAN,MAA8C;AAAA,EAGnD,cAAc;AACZ,SAAK,aAAa,IAAI,iBAAiB;AAAA,EACzC;AAAA,EAEA,MAAM,gBAAsC;AAC1C,UAAM,UAAU,MAAM,KAAK,WAAW,QAAQ;AAC9C,WAAO,aAAa,UAAU,OAAO;AAAA,EACvC;AACF;;;ALdA,IAAM,UAAU,IAAI,cAAc;AAE3B,IAAM,gBAAgB,YAAY;AACvC,MAAI;AACF,UAAM,SAAS,MAAM,QAAQ,cAAc;AAE3C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,MAAM;AAAA,IAC7B;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,0BAA0B,KAAK;AAE7C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,iCAAiC,CAAC;AAAA,IACpE;AAAA,EACF;AACF;",
  "names": []
}
