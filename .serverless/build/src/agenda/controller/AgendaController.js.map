{
  "version": 3,
  "sources": ["../../../../../src/agenda/repository/AgendaRepository.ts", "../../../../../src/agenda/entity/AgendaEntity.ts", "../../../../../src/agenda/mapper/AgendaMapper.ts", "../../../../../src/agenda/service/AgendaService.ts", "../../../../../src/agenda/controller/AgendaController.ts"],
  "sourcesContent": ["import { promises as fs } from \"fs\";\nimport * as path from \"path\";\nimport type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport type { IAgendaRepository } from \"../interface/IAgendaRepository\";\n\nconst FILE = path.resolve(process.cwd(), \"src/agenda/mock/agendas.json\");\n\nexport class AgendaRepository implements IAgendaRepository {\n  \n  private async readFile(): Promise<AgendaDTO[]> {\n    const data = await fs.readFile(FILE, \"utf-8\");\n    return JSON.parse(data) as AgendaDTO[];\n  }\n\n  private async writeFile(agendas: AgendaDTO[]): Promise<void> {\n    await fs.writeFile(FILE, JSON.stringify(agendas, null, 2), \"utf-8\");\n  }\n\n  async findAll(): Promise<AgendaDTO[]> { return this.readFile(); }\n  \n  async findById(id: number): Promise<AgendaDTO | null> {\n    const agendas = await this.readFile();\n    return agendas.find(a => a.id === Number(id)) ?? null;\n  }\n\n  async deleteHorario(id: number, horario: string): Promise<void> {\n    const agendas = await this.readFile();\n    const agenda = agendas.find(a => a.id === Number(id));\n    if (!agenda) return;\n    const alvo = (horario ?? \"\").trim();\n    agenda.horariosDisponiveis = (agenda.horariosDisponiveis ?? [])\n      .map(h => h.trim())\n      .filter(h => h !== alvo);\n    await this.writeFile(agendas);\n  }\n\n}\n", "export class AgendaEntity {\n  id: number | undefined;\n  nome: string | undefined;\n  especialidade: string | undefined;\n  horariosDisponiveis: string[] | undefined;\n}", "import type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport { AgendaEntity } from \"../entity/AgendaEntity\";\n\nexport class AgendaMapper {\n  static toEntity(dto: AgendaDTO): AgendaEntity {\n    const entity = new AgendaEntity();\n    entity.id = dto.id;\n    entity.nome = dto.nome;\n    entity.especialidade = dto.especialidade;\n    entity.horariosDisponiveis = dto.horariosDisponiveis;\n    return entity;\n  }\n\n  static toDTO(entity: AgendaEntity): AgendaDTO {\n    return {\n      id: entity.id ?? 0,\n      nome: entity.nome ?? \"\",\n      especialidade: entity.especialidade ?? \"\",\n      horariosDisponiveis: entity.horariosDisponiveis ?? [],\n    };\n  }\n\n  static toEntityList(dtos: AgendaDTO[]): AgendaEntity[] {\n    return dtos.map((dto) => this.toEntity(dto));\n  }\n\n  static toDTOList(entities: AgendaEntity[]): AgendaDTO[] {\n    return entities.map((entity) => this.toDTO(entity));\n  }\n}\n", "import type { AgendaDTO } from \"../dto/AgendaDTO\";\nimport type { IAgendaService } from \"../interface/IAgendaService\";\nimport { AgendaRepository } from \"../repository/AgendaRepository\";\nimport { AgendaMapper } from \"../mapper/AgendaMapper\";\nimport type { IAgendaRepository } from \"../interface/IAgendaRepository\";\n\nexport class AgendaService implements IAgendaService {\n  private repository: IAgendaRepository;\n\n  constructor() {\n    this.repository = new AgendaRepository();\n  }\n\n  async excluirHorario(id: number, horario: string): Promise<void> {\n    return this.repository.deleteHorario(id, horario);\n  }\n  \n  async buscarPorId(id: number): Promise<AgendaDTO | null> {\n    const entity = await this.repository.findById(id);\n    if (!entity) {\n      return null;\n    }\n    return AgendaMapper.toDTO(entity);\n  }\n\n  async buscarAgendas(): Promise<AgendaDTO[]> {\n    const agendas = await this.repository.findAll();\n    return AgendaMapper.toDTOList(agendas);\n  }\n}\n", "import { AgendaService } from \"../service/AgendaService\";\n\nconst service = new AgendaService();\n\nexport const buscarAgendas = async () => {\n  try {\n    const result = await service.buscarAgendas();\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result),\n    };\n  } catch (error) {\n    console.error(\"Erro ao buscar agendas\", error);\n\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: \"Erro interno ao buscar agendas\" }),\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
